:javascript
  $(function() {
    
    // Table sorter
    $('table').tablesorter();

   // Protovis
    $('#vis_content').hide();
    $('#vis_header').click(function() {
      $('#vis_content').slideToggle(600);
    });

  });
  
  vis_data = #{vis_json}
  bar_clazz = '';

%h1 
  -# Dodge to leave the rest of the name as specified so that
  -# my name doesn't have a small D in
  = "#{username[0,1].capitalize}#{username[1..-1]}'s Backpack"
  %img.avatar{:src => avatarUrl}


#vis_container.container
  %h2#vis_header 
    Visualisations
    %small
      [Click to expand]
  #vis_content.container 
    %script{:type => 'text/javascript+protovis'}
      :plain
        /* Sizing and scales. */
        var w = 400,
            h = 300,
            r = h / 2,
            sum = 0
            ;

        var pie_data = [ ];
        for (var i in vis_data[0]) {
          var class_array = vis_data[0][i];
          class_cnt = pv.sum(class_array, function(d) d.items)
          pie_data.push({
            clazz: i,
            items: class_cnt
          });
          sum += class_cnt;
        }

        var a = pv.Scale.linear(0, sum).range(0, 2 * Math.PI);

        /* The root panel. */
        var root = new pv.Panel()
            .width(400 + w)
            .height(h)
            .data(vis_data);
        
        var bar_data = [];
        var bar_max = 0;

        var vis = root.add(pv.Wedge)
            .data(pie_data)
            .left(h/2)
            .bottom(h/2)
            .innerRadius(40)
            .outerRadius(r)
            .angle(a.by(function(d) d.items))
            .event('mousemove', function() {
              var bar_clazz = pie_data[this.index].clazz;
              bar_data = vis_data[0][bar_clazz];
              bar_max = pv.max(bar_data, function(d) d.items);
              root.render();
            })
            .event('mouseout', function() {
              bar_data = [];
              bar_max = 0;
              root.render();
            })
          .anchor("center").add(pv.Label)
            .textAngle(0)
            .text(function(d) d.clazz)
            .textStyle('white')
            ;

        root.add(pv.Rule)
            .data(function() pv.range(0, 15, 2))
            .bottom(function(d) 30 + d * 20)
            .width(4 * 80)
            .left(w - 10)
            .strokeStyle("black")
          .add(pv.Label)
            .textAlign("right")
            .textBaseline("middle")
            .text(function(d) d);

        var bar_scale = pv.Colors.category20();
        var bar = root.add(pv.Bar)
            .data(function(d) bar_data)
            .width(60)
            .height(function(d) 20 * d.items)
            .bottom(30)
            .left(function(d) w + d.slot_index * 80)
            .fillStyle(function(d) bar_scale(d.slot_index))
          .anchor("bottom").add(pv.Label)
            .textAngle(0)
            .text(function(d) d.slot)
            .textStyle('black');

        root.add(pv.Label)
          .text('Item Breakdown (mouse over the pie)')
          .right((4*80) + 20)
          .bottom(0);

        root.render();

#items_container.container
  %h2 Unique Items

  - sections = ['Head', 'Primary', 'Secondary', 'Melee', 'PDA', 'Other']
  - sections.each do |section|
    - items, remaining = firsts.partition do |i|
      -# Not sure why straight == doesn't seem to work
      - 0 == ( section <=> item_slot(i[:defindex]) )
    - if items.empty? then 
      - items = remaining
    %h3= section
    %table.tablesorter
      %thead
        %tr
          %th Item Name
          %th Equipped By
      %tbody
        - items.each do |item|
          %tr{:class => if item[:equipped_by].empty? then 'not-equipped' else 'equipped' end } 
            %td= real_name item
            %td
              - inits = item[:equipped_by].collect do |i| 
                %img{:src => "/valve-imgs/20px-Leaderboard_class_#{i.downcase}.png", :alt => "#{i}"}
    - firsts = remaining
  
  %h2 Dupes 
  %ul
    - dupes.each do |item|
      %li 
        = real_name item
