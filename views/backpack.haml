:javascript
  $(function() {
    
    // Table sorter
    $('table').tablesorter();

    // Protovis
    $('.closed').hide();
    $('.expando h3').click(function() {
      $(this).next().slideToggle(500);
    });

    // Tipsy
    $('.item_nameE').tipsy({fade: true, gravity: 'e', html: true, title: 'item_pic_img'});
    $('.item_nameW').tipsy({fade: true, gravity: 'w', html: true, title: 'item_pic_img'});

  });
  
  vis_data = #{classSlotItem.to_json}
  bar_clazz = '';

%h1 
  -# Dodge to leave the rest of the name as specified so that
  -# my name doesn't have a small D in
  = "#{username}'s Backpack"
  %img.avatar{:alt => 'avatar', :src => avatarUrl}


#vis_container.container.expando
  %h3#vis_header 
    Item Chart
    %small
      [Click to hide]
  #vis_content.container
    %script{:type => 'text/javascript+protovis'}
      :plain
        /* Sizing and scales. */
        var w = 400,
            h = 300,
            r = h / 2,
            sum = 0
            ;

        var pie_data = [ ];
        for (var i in vis_data) {
          var class_array = vis_data[i];
          var class_cnt = 0;
          for (var s in class_array) {
            class_cnt += Object.keys(class_array[s]).length;
          }
          pie_data.push({
            clazz: i,
            items: class_cnt
          });
          sum += class_cnt;
        }

        var a = pv.Scale.linear(0, sum).range(0, 2 * Math.PI);

        /* The root panel. */
        var root = new pv.Panel()
            .width(400 + w)
            .height(h);
        
        var bar_data = [];
        var bar_max = 10;

        var vis = root.add(pv.Wedge)
            .data(pie_data)
            .left(h/2)
            .bottom(h/2)
            .innerRadius(40)
            .outerRadius(r)
            .angle(a.by(function(d) d.items))
            .event('mousemove', function() {
              var bar_clazz = pie_data[this.index].clazz;
              bar_data = vis_data[bar_clazz];
              bar_max = pv.max(Object.keys(bar_data), function(k) Object.keys(bar_data[k]).length)
              bar_scale = pv.Scale.linear(0, bar_max).range(30,290);
              root.render();
            })
            .event('mouseout', function() {
              bar_data = [];
              bar_max = 10;
              bar_scale = pv.Scale.linear(0, bar_max).range(30,290);
              root.render();
            })
          .anchor("center").add(pv.Label)
            .textAngle(0)
            .text(function(d) d.clazz + '(' + d.items + ')')
            .textStyle('white');

        root.add(pv.Label)
          .text('Item Breakdown (mouse over the pie)')
          .right((4*80) + 20)
          .bottom(0);
        
        var bar_rule = root.add(pv.Rule)
            .data(function() pv.range(0, bar_max + 1, 2))
            .bottom(function(d) bar_scale(d))
            .width(4 * 80)
            .left(w - 10)
            .strokeStyle("black")
          .add(pv.Label)
            .textAlign("right")
            .textBaseline("middle")
            .text(function(d) d);

        var bar_colors = pv.Colors.category20();
        var bar_scale = pv.Scale.linear(0, bar_max).range(30,290);
        var bar = root.add(pv.Bar)
          .data(function() Object.keys(bar_data).reverse().slice(0,4))
            .width(60)
            .height(function(d) {
              return -30 + bar_scale(Object.keys(bar_data[d]).length);
            })
            .bottom(30)
            .left(function(d) w + this.index * 80)
            .fillStyle(function(d) bar_colors(this.index));
        bar.anchor("bottom").add(pv.Label)
            .textAngle(0)
            .text(function(d) d)
            .textBaseline('top')
            .textStyle('black');
        bar.anchor("top").add(pv.Label)
            .textBaseline('bottom')
            .textAngle(0)
            .text(function(d) Object.keys(bar_data[d]).length)
            .visible(function(d) Object.keys(bar_data[d]).length)
            .textStyle('white');

        root.render();


- sections.each do |section|
  .container.expando
    %h3
      = section
      %small
        [Click to expand/hide]
    %table.tablesorter.closed
      %thead
        %tr
          %th Item Name
          %th Equipped By
      %tbody
        - # item_detail[item_name, eqipped_pics]
        - item_detail = {}
        - classSlotItem.each do |class_name, slots|
          - class_pic_url = "/valve-imgs/20px-Leaderboard_class_#{class_name.downcase}.png"
          - classSlotItem[class_name][section].values.each do |item|
            - item_detail[item[:defindex]] ||= item
            - equipped_imgs = item_detail[item[:defindex]][:equipped_pics]
            - if !equipped_imgs then
              - equipped_imgs = []
              - item_detail[item[:defindex]][:equipped_pics] = equipped_imgs
            - if item[:equipped] then
              - equipped_imgs << class_pic_url 
        - item_detail.each do |item_idx, item|
          - equipped_pics = item[:equipped_pics]
          %tr
            %td
              - border_style = '0'
              - if item[:paint_col].nil?
                - item[:paint_col] = 'transparent'
              %span{:style => "color:#{item[:paint_col]}; background-color: #{item[:paint_col]};display:inline-block;", :height => '1em', :width => '1.5em'}
                HH
              %span.item_nameE{:item_pic_img => "<img style='border: #{border_style};' src='#{item[:img_url]}' />", :class => 'item_name'}
                = item[:real_name]
              %span
                - unless item[:tradable]
                  %strong [Not-tradable]
            %td
              - equipped_pics.each do |url|
                %img{:src => url}
  
.container.expando
  %h3 
    Duplicates
    %small
      [Click to expand/hide]
  %ul.closed
    - dupes.group_by { |i| i[:real_name] }.each do |item_type, item_list|
      - item = item_list[0]
      %li.item_nameW{:item_pic_img => "<img src='#{item[:img_url]}' />"}
        = "#{item[:real_name]} (#{item_list.size})"
  
.container.expando
  %h3 
    Unequipable Items
    %small
      [Click to expand/hide]
  %ul.closed
    - miscs.group_by { |i| i[:real_name] }.each do |item_type, item_list|
      - item = item_list[0]
      %li.item_nameW{:item_pic_img => "<img src='#{item[:img_url]}' />"}
        = "#{item[:real_name]} (#{item_list.size})"
